@page "/register"
@using System.Net.Http.Json
@using Shared.Models.DTOs
@using TTTFrontend.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage
@inject AuthenticationService AuthService

<h3 class="text-center mt-5">Register</h3>

<div class="d-flex justify-content-center align-items-center" style="height: 80vh;" aria-expanded="false">
    <div class="card p-4" style="width: 300px;">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="text-danger mt-3">@errorMessage</p>
        }

        <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
            <DataAnnotationsValidator />

            <div class="form-group mb-3">
                <label for="username">Username:<span class="@(showUsernameError ? "text-danger" : "text-dark")">*</span></label>
                <InputText id="username" class="@(showUsernameError ? "form-control border-danger" : "form-control")" @bind-Value="registerModel.Username" />
                @if (showUsernameError)
                {
                    <small class="text-danger">Username is required.</small>
                }
            </div>

            <div class="form-group mb-3">
                <label for="email">Email:<span class="@(showEmailError ? "text-danger" : "text-dark")">*</span></label>
                <InputText id="email" type="email" class="@(showEmailError ? "form-control border-danger" : "form-control")" @bind-Value="registerModel.Email" />
                @if (showEmailError)
                {
                    <small class="text-danger">A valid email is required.</small>
                }
            </div>

            <div class="form-group mb-3">
                <label for="password">Password:<span class="@(showPasswordError ? "text-danger" : "text-dark")">*</span></label>
                <InputText id="password" type="password" class="@(showPasswordError ? "form-control border-danger" : "form-control")" @bind-Value="registerModel.Password" />
                @if (showPasswordError)
                {
                    <small class="text-danger">Password is required.</small>
                }
            </div>

            <div class="form-group mb-3">
                <label for="confirmPassword">Confirm Password:<span class="@(showConfirmPasswordError ? "text-danger" : "text-dark")">*</span></label>
                <InputText id="confirmPassword" type="password" class="@(showConfirmPasswordError ? "form-control border-danger" : "form-control")" @bind-Value="confirmPassword" />
                @if (showConfirmPasswordError)
                {
                    <small class="text-danger">Passwords do not match.</small>
                }
            </div>

            <button type="submit" class="btn btn-outline-dark w-100">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private UserRegistrationDTO registerModel = new UserRegistrationDTO();
    private string confirmPassword;
    private string errorMessage;
    private bool showUsernameError = false;
    private bool showEmailError = false;
    private bool showPasswordError = false;
    private bool showConfirmPasswordError = false;

    private async Task HandleRegister()
    {
        // Reset error states before submission
        ResetErrorStates();

        // Validate fields before calling the backend
        bool isValid = true;

        if (string.IsNullOrEmpty(registerModel.Username))
        {
            showUsernameError = true;
            isValid = false;
        }

        if (string.IsNullOrEmpty(registerModel.Email))
        {
            showEmailError = true;
            isValid = false;
        }
        else if (!IsValidEmail(registerModel.Email))
        {
            showEmailError = true;
            errorMessage = "Please enter a valid email address.";
            isValid = false;
        }

        if (string.IsNullOrEmpty(registerModel.Password))
        {
            showPasswordError = true;
            isValid = false;
        }

        if (string.IsNullOrEmpty(confirmPassword))
        {
            showConfirmPasswordError = true;
            isValid = false;
        }
        else if (registerModel.Password != confirmPassword)
        {
            showConfirmPasswordError = true;
            errorMessage = "Passwords do not match.";
            isValid = false;
        }

        if (!isValid)
        {
            if (string.IsNullOrEmpty(errorMessage))
            {
                errorMessage = "Please fill in all required fields.";
            }
            return;
        }

        var response = await AuthService.Register(registerModel);
        if (response.Success)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            errorMessage = response.ErrorMessage;
        }
    }

    private void ResetErrorStates()
    {
        showUsernameError = false;
        showEmailError = false;
        showPasswordError = false;
        showConfirmPasswordError = false;
        errorMessage = string.Empty;
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
}