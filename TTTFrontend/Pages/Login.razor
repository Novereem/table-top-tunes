@page "/login"
@using System.Net.Http.Json
@using Shared.Models.DTOs
@using TTTFrontend.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage
@inject AuthenticationService AuthService

<h3 class="text-center mt-5">Login</h3>

<div class="d-flex flex-column justify-content-center align-items-center" style="height: 80vh; outline: none; box-shadow: none;" aria-expanded="false">
    <div class="card p-4" style="width: 300px;">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="text-danger mt-3">@errorMessage</p>
        }
        @if (!string.IsNullOrEmpty(succcessMessage))
        {
            <p class="text-success mt-3">@succcessMessage</p>
        }
        <EditForm Model="@userLoginDTO" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />

            <div class="form-group mb-3">
                <label for="username">Username:<span class="@(showUsernameError ? "text-danger" : "text-dark")">*</span></label>
                <InputText id="username" class="@(showUsernameError ? "form-control border-danger" : "form-control")" @bind-Value="userLoginDTO.Username" />
                @if (showUsernameError)
                {
                    <small class="text-danger">Username is required.</small>
                }
            </div>
            <div class="form-group mb-3">
                <label for="password">Password:<span class="@(showPasswordError ? "text-danger" : "text-dark")">*</span></label>
                <InputText id="password" class="@(showPasswordError ? "form-control border-danger" : "form-control")" @bind-Value="userLoginDTO.Password" type="password" />
                @if (showPasswordError)
                {
                    <small class="text-danger">Password is required.</small>
                }
            </div>

            <button type="submit" class="btn btn-outline-dark w-100">Login</button>
            @if (isLoading)
            {
                <p class="text-center text-secondary">Loading...</p>
            }
        </EditForm>
    </div>
    <div class="d-flex">
        <a href="/register" class="text-decoration-none text-dark py-2">Don't have an account? Register here</a>
    </div>
</div>

@code {
    private UserLoginDTO userLoginDTO = new UserLoginDTO();
    private string errorMessage = string.Empty;
    private string succcessMessage = string.Empty;
    private bool showUsernameAsterisk = false;
    private bool showPasswordAsterisk = false;
    private bool showUsernameError = false;
    private bool showPasswordError = false;

    private bool isLoading = false;

    private async Task HandleLogin()
    {
        ResetErrorStates();
        isLoading = true;

        // Validate fields before calling the backend
        if (string.IsNullOrEmpty(userLoginDTO.Username) || string.IsNullOrEmpty(userLoginDTO.Password))
        {
            if (string.IsNullOrEmpty(userLoginDTO.Username))
            {
                showUsernameAsterisk = true;
                showUsernameError = true;
                isLoading = false;
            }
            if (string.IsNullOrEmpty(userLoginDTO.Password))
            {
                showPasswordAsterisk = true;
                showPasswordError = true;
                isLoading = false;
            }
            errorMessage = "Please fill in all required fields.";
            return;
        }

        var response = await AuthService.LoginAsync(userLoginDTO);
        if (response.Success)
        {
            succcessMessage = response.Message;
            LocalStorage.SetItem("authToken", response.Data?.Token);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = response.Message;
        }

        isLoading = false;
    }

    private void ResetErrorStates()
    {
        showUsernameAsterisk = false;
        showPasswordAsterisk = false;
        showUsernameError = false;
        showPasswordError = false;
        errorMessage = string.Empty;
    }
}
