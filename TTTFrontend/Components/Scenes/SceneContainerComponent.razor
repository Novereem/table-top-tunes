@using Shared.Models.DTOs
@using TTTFrontend.Components.Scenes
@using Shared.Models
@using TTTFrontend.Services
@inject SceneService SceneService
@inject SelectedSceneService SelectedSceneService

<div class="d-flex flex-column align-items-stretch flex-shrink-0 bg-white" style="width: 20vw; height: 100vh;">
    <div class="d-flex justify-content-center align-items-center flex-shrink-0 text-decoration-none border-bottom border-end" style="height: 10vh;">
        <h3 class="fs-1 fw-semibold m-0">Scenes</h3>
    </div>

    <div class="list-group list-group-flush overflow-auto flex-grow-1 border-end hide-scrollbar">
        @if (Scenes == null)
        {
            <div class="d-flex justify-content-center align-items-center">Loading...</div>
        }
        else if (!Scenes.Any())
        {
            <div class="d-flex justify-content-center align-items-center">No scenes available, please create a scene</div>
        }
        else
        {
            @foreach (var scene in Scenes)
            {
                <SceneComponent Scene="scene" OnSceneSelected="LoadSceneDetails" />
            }
        }
        <SceneCreateButton OnSceneCreated="RefreshSceneList" />
    </div>
</div>

@code {
    private List<SceneListItemDTO> Scenes = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshSceneList();
    }

    private async Task RefreshSceneList()
    {
        var scenes = await SceneService.GetScenesListAsync();
        Scenes = scenes.Data!;
    }

    private async Task LoadSceneDetails(Guid sceneId)
    {
        var sceneDetails = await SceneService.GetSceneAsync(sceneId);
        SelectedSceneService.SelectedScene = sceneDetails.Data!;
    }
}